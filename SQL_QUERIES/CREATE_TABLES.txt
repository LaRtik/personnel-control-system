CREATE TABLE access_levels (
	level serial PRIMARY KEY,
	name text NOT NULL,
	description text,
	salary money NOT NULL
);


CREATE TABLE positions (
	id serial PRIMARY KEY,
	name text NOT NULL,
	description text,
	salary money NOT NULL
);

CREATE EXTENSION pgcrypto;

CREATE TABLE fire_reasons (
	id serial PRIMARY KEY,
	description text NOT NULL
);

CREATE TABLE office_rooms (
	id serial PRIMARY KEY,
	floor integer NOT NULL
);

CREATE TABLE office_rooms_tables (
	id serial PRIMARY KEY,
	office_room_id int REFERENCES office_rooms (id) ON DELETE CASCADE
);

CREATE TABLE employees (
	id serial PRIMARY KEY,
	name text NOT NULL,
	surname text NOT NULL,
	personal_link text NOT NULL,
	email char(50) NOT NULL,
	additional_info text,
	access_level integer DEFAULT 0 REFERENCES access_levels (level) ON DELETE SET DEFAULT,
	position_id integer REFERENCES positions (id) ON DELETE SET NULL,
	activity_points numeric NOT NULL DEFAULT 0.00,
	last_promotion_date date,
	hire_date date NOT NULL,
	fire_date date,
	fire_reason integer REFERENCES fire_reasons (id) ON DELETE SET NULL,
	archived bool NOT NULL DEFAULT false,
	pass_hash text NOT NULL,
	office_table_id integer DEFAULT NULL REFERENCES office_rooms_tables (id) ON DELETE SET NULL
);

CREATE TABLE sensitive_employees_personal_info (
	employee_id integer PRIMARY KEY REFERENCES employees (id) ON DELETE RESTRICT,
	date_of_birth date NOT NULL,
	city char(30) NOT NULL,
	phone_number char(20) NOT NULL
);


CREATE TABLE departaments (
	id serial PRIMARY KEY,
	name text NOT NULL,
	head_id integer NOT NULL UNIQUE REFERENCES employees (id) ON DELETE RESTRICT,
	deputy_head_id integer UNIQUE REFERENCES employees (id) ON DELETE RESTRICT
);

CREATE TABLE projects (
	id serial PRIMARY KEY,
	name text NOT NULL,
	departament_id integer NOT NULL REFERENCES departaments (id) ON DELETE RESTRICT
);


CREATE TABLE activities (
	name char(50) PRIMARY KEY,
	points integer NOT NULL,
	description text NOT NULL,
	required_access_level integer NOT NULL REFERENCES access_levels(level) ON DELETE RESTRICT
);


CREATE TABLE activities_tickets (
	id serial PRIMARY KEY,
	activity char(50) NOT NULL REFERENCES activities(name) ON DELETE CASCADE,
	description text,
	owner_id integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	tstamp timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE activity_points_bonuses (
	name char(50) PRIMARY KEY,
	points integer NOT NULL,
	description text NOT NULL
);

CREATE TABLE task_tickets_types (
	type serial PRIMARY KEY,
	description text NOT NULL
);

CREATE TABLE task_tickets (
	id serial PRIMARY KEY,
	owner integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	assignee integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	ticket_type int REFERENCES task_tickets_types(type) ON DELETE CASCADE,
	tstamp timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE financial_tickets_types (
	type serial PRIMARY KEY,
	description text NOT NULL
);

CREATE TABLE financial_tickets (
	id serial PRIMARY KEY,
	owner integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	assignee integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	ticket_type int REFERENCES financial_tickets_types(type) ON DELETE CASCADE,
	tstamp timestamp DEFAULT CURRENT_TIMESTAMP,
	money_change money NOT NULL
);

CREATE TABLE gaps_types (
	id serial PRIMARY KEY,
	name char(50) NOT NULL,
	description text NOT NULL
);

CREATE TABLE gaps (
	id serial PRIMARY KEY,
	employee_id integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	gap_type_id integer NOT NULL REFERENCES gaps_types(id) ON DELETE CASCADE,
	start_dt date NOT NULL,
	end_dt date NOT NULL,
	additional_info text
);

CREATE TABLE goals_types (
	id serial PRIMARY KEY,
	name char(50) NOT NULL,
	description text NOT NULL
);

CREATE TABLE goals (
	id serial PRIMARY KEY,
	type integer NOT NULL REFERENCES goals_types(id) ON DELETE CASCADE,
	deadline date NOT NULL
);

CREATE TABLE meetings_rooms (
	id serial PRIMARY KEY,
	additional_info text,
	chairs_count integer NOT NULL DEFAULT 1,
	has_screen boolean NOT NULL DEFAULT false
);

CREATE TABLE meetings (
	id serial PRIMARY KEY,
	start_ts timestamp NOT NULL,
	end_ts timestamp NOT NULL,
	additional_info text,
	meeting_room_id integer NOT NULL REFERENCES meetings_rooms(id) ON DELETE CASCADE
);

CREATE TABLE permissions (
	id serial PRIMARY KEY,
	name char(50) NOT NULL,
	description text NOT NULL
);

CREATE TABLE log_types (
	type serial PRIMARY KEY,
	description text NOT NULL
);

CREATE TABLE logs (
	id serial PRIMARY KEY,
	type integer NOT NULL REFERENCES log_types(type) ON DELETE SET DEFAULT,
	initiator_id integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	affected_id integer REFERENCES employees(id) ON DELETE CASCADE,
	tstamp timestamp DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE employees_projects (
	project_id integer NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
	employee_id integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	CONSTRAINT employees_projects_pkey PRIMARY KEY (project_id, employee_id)
);

CREATE TABLE access_levels_permissions (
	access_level integer NOT NULL REFERENCES access_levels(level) ON DELETE CASCADE,
	permission_id integer NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
	CONSTRAINT access_levels_permissions_pkey PRIMARY KEY (access_level, permission_id)
);

CREATE TABLE projects_permissions (
	project_id integer NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
	permission_id integer NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
	CONSTRAINT projects_permissions_pkey PRIMARY KEY (project_id, permission_id)
);

CREATE TABLE employees_meetings (
	meeting_id integer NOT NULL REFERENCES meetings(id) ON DELETE CASCADE,
	employee_id integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	CONSTRAINT employees_meetings_pkey PRIMARY KEY (meeting_id, employee_id)
);

CREATE TABLE employees_goals (
	goal_id integer NOT NULL REFERENCES goals(id) ON DELETE CASCADE,
	employee_id integer NOT NULL REFERENCES employees(id) ON DELETE CASCADE,
	CONSTRAINT employees_goals_pkey PRIMARY KEY (goal_id, employee_id)
);
