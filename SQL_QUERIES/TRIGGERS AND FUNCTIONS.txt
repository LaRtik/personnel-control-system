// trigger registered
CREATE OR REPLACE FUNCTION employee_registered() RETURNS trigger AS $employee_registered$
	BEGIN
		INSERT INTO logs(type, initiator_id) SELECT 3, NEW.id;
		RETURN NEW;
	END;
$employee_registered$ LANGUAGE plpgsql;

CREATE TRIGGER employee_registered
AFTER INSERT ON employees
FOR EACH ROW EXECUTE PROCEDURE employee_registered();



// hire employee
CREATE OR REPLACE PROCEDURE employee_hired(initiator_id integer, affected_id integer) 
LANGUAGE SQL AS $employee_hired$
	UPDATE employees
	SET access_level = 1
	WHERE id = affected_id;
	
	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(2, initiator_id, affected_id);
$employee_hired$;


// promote employee
CREATE OR REPLACE PROCEDURE employee_promoted(initiator_id integer, affected_id integer) 
LANGUAGE SQL AS $employee_promoted$
	UPDATE employees
	SET access_level = access_level + 1
	WHERE id = affected_id;
	
	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(12, initiator_id, affected_id);
$employee_promoted$;


// fire employee
CREATE OR REPLACE PROCEDURE employee_fired(initiator_id integer, affected_id integer, reason_id integer) 
LANGUAGE SQL AS $employee_fired$
	UPDATE employees
	SET access_level = 0, position_id = null, fire_date = CURRENT_TIMESTAMP, fire_reason = reason_id, archived = true
	WHERE id = affected_id;
	
	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(1, initiator_id, affected_id);
$employee_fired$;



// new departament
CREATE OR REPLACE PROCEDURE new_departament(initiator_id integer, name text, head_id integer, deputy_head_id integer) 
LANGUAGE plpgsql AS $new_departament$
BEGIN
	IF (deputy_head_id = -1) THEN
		INSERT INTO departaments(name, head_id) VALUES
		(name, head_id);
		
		INSERT INTO logs(type, initiator_id, affected_id) VALUES
		(6, initiator_id, null),
		(7, initiator_id, head_id);
	ELSE
		INSERT INTO departaments(name, head_id, deputy_head_id) VALUES
		(name, head_id, deputy_head_id);
		
		INSERT INTO logs(type, initiator_id, affected_id) VALUES
		(6, initiator_id, null),
		(7, initiator_id, head_id),
		(8, initiator_id, deputy_head_id);
	END IF;
END;
$new_departament$;


-- add new office room
CREATE OR REPLACE PROCEDURE add_office_room(initiator_id integer, id integer, floor integer) 
LANGUAGE SQL AS $add_office_room$
	INSERT INTO office_rooms(id, floor) VALUES
	(id, floor);

	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(13, initiator_id, null);
$add_office_room$;


-- add new meeting room
CREATE OR REPLACE PROCEDURE add_meeting_room(initiator_id integer, id integer, additional_info text, chairs_count int, has_screen boolean) 
LANGUAGE SQL AS $add_meeting_room$
	INSERT INTO meetings_rooms(id, additional_info, chairs_count, has_screen) VALUES
	(id, additional_info, chairs_count, has_screen);

	
	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(14, initiator_id, null);
$add_meeting_room$;

-- add new goal type
CREATE OR REPLACE PROCEDURE add_goal_type(initianor_id integer, name char(50), description text) 
LANGUAGE SQL AS $add_goal_type$
	INSERT INTO goals_types(name, description) VALUES
	(name, description);
	
	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(15, initianor_id, null);
$add_goal_type$;


// trigger for activities from logs
CREATE OR REPLACE FUNCTION activities_from_logs() RETURNS trigger AS $activities_from_logs$
	BEGIN
		CASE NEW.type
			WHEN 1 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'Fired an employee', NEW.initiator_id, 'Fire';
			WHEN 2 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'Hired an employee', NEW.initiator_id, 'Hire';
			WHEN 3 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'Welcome on board', NEW.initiator_id, 'Welcome';
			WHEN 4 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'Ticket employee', NEW.initiator_id, 'Ticket';
			WHEN 5 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'New project to departament', NEW.initiator_id, 'New project';
			WHEN 6 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'New departament created', NEW.initiator_id, 'New departament';
			WHEN 12 THEN
				INSERT INTO activities_tickets(description, owner_id, activity)
				SELECT 'Gratz! You are promoted', NEW.affected_id, 'Promotion';
			ELSE
		END CASE;
		RETURN NEW;
	END;
$activities_from_logs$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER activities_from_logs
AFTER INSERT ON logs
FOR EACH ROW EXECUTE PROCEDURE activities_from_logs();



// recalc points on activities tickets
CREATE OR REPLACE FUNCTION recalc_points() RETURNS trigger AS $recalc_points$
	BEGIN
		UPDATE employees
		SET activity_points = activity_points + (SELECT points FROM activities WHERE name = NEW.activity)
		WHERE id = NEW.owner_id;
		RETURN NEW;
	END;
$recalc_points$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER recalc_points
AFTER INSERT ON activities_tickets
FOR EACH ROW EXECUTE PROCEDURE recalc_points();



// new activity for employee
CREATE OR REPLACE PROCEDURE new_employee_activity(initiator_id integer, affected_id integer, activity_name text) 
LANGUAGE plpgsql AS $new_employee_activity$
BEGIN
	INSERT INTO logs(type, initiator_id, affected_id) VALUES
	(9, initiator_id, affected_id);
	
	INSERT INTO activities_tickets(description, owner_id, activity) VALUES
	('Work process', affected_id, activity_name);
END;
$new_employee_activity$;